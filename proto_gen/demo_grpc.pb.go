// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: demo.proto

package proto_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoClient interface {
	HelloWorld(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ResponseMessage, error)
	CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*ResponseMessage, error)
	GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*GetRepoResp, error)
	DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*ResponseMessage, error)
	UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*ResponseMessage, error)
	TriggerScan(ctx context.Context, in *ScanTriggerReq, opts ...grpc.CallOption) (*ResponseMessage, error)
	GetScanResults(ctx context.Context, in *GetScanResultReq, opts ...grpc.CallOption) (*GetScanResultResp, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) HelloWorld(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/demo.Demo/helloWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) CreateRepo(ctx context.Context, in *CreateRepoReq, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/demo.Demo/createRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetRepo(ctx context.Context, in *GetRepoReq, opts ...grpc.CallOption) (*GetRepoResp, error) {
	out := new(GetRepoResp)
	err := c.cc.Invoke(ctx, "/demo.Demo/getRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) DeleteRepo(ctx context.Context, in *DeleteRepoReq, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/demo.Demo/deleteRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) UpdateRepo(ctx context.Context, in *UpdateRepoReq, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/demo.Demo/updateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) TriggerScan(ctx context.Context, in *ScanTriggerReq, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/demo.Demo/triggerScan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) GetScanResults(ctx context.Context, in *GetScanResultReq, opts ...grpc.CallOption) (*GetScanResultResp, error) {
	out := new(GetScanResultResp)
	err := c.cc.Invoke(ctx, "/demo.Demo/getScanResults", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility
type DemoServer interface {
	HelloWorld(context.Context, *EmptyMessage) (*ResponseMessage, error)
	CreateRepo(context.Context, *CreateRepoReq) (*ResponseMessage, error)
	GetRepo(context.Context, *GetRepoReq) (*GetRepoResp, error)
	DeleteRepo(context.Context, *DeleteRepoReq) (*ResponseMessage, error)
	UpdateRepo(context.Context, *UpdateRepoReq) (*ResponseMessage, error)
	TriggerScan(context.Context, *ScanTriggerReq) (*ResponseMessage, error)
	GetScanResults(context.Context, *GetScanResultReq) (*GetScanResultResp, error)
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (UnimplementedDemoServer) HelloWorld(context.Context, *EmptyMessage) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloWorld not implemented")
}
func (UnimplementedDemoServer) CreateRepo(context.Context, *CreateRepoReq) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedDemoServer) GetRepo(context.Context, *GetRepoReq) (*GetRepoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedDemoServer) DeleteRepo(context.Context, *DeleteRepoReq) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedDemoServer) UpdateRepo(context.Context, *UpdateRepoReq) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepo not implemented")
}
func (UnimplementedDemoServer) TriggerScan(context.Context, *ScanTriggerReq) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerScan not implemented")
}
func (UnimplementedDemoServer) GetScanResults(context.Context, *GetScanResultReq) (*GetScanResultResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScanResults not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_HelloWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).HelloWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/helloWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).HelloWorld(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/createRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).CreateRepo(ctx, req.(*CreateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/getRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GetRepo(ctx, req.(*GetRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/deleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).DeleteRepo(ctx, req.(*DeleteRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/updateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).UpdateRepo(ctx, req.(*UpdateRepoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_TriggerScan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScanTriggerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).TriggerScan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/triggerScan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).TriggerScan(ctx, req.(*ScanTriggerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_GetScanResults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetScanResultReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).GetScanResults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.Demo/getScanResults",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).GetScanResults(ctx, req.(*GetScanResultReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "demo.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "helloWorld",
			Handler:    _Demo_HelloWorld_Handler,
		},
		{
			MethodName: "createRepo",
			Handler:    _Demo_CreateRepo_Handler,
		},
		{
			MethodName: "getRepo",
			Handler:    _Demo_GetRepo_Handler,
		},
		{
			MethodName: "deleteRepo",
			Handler:    _Demo_DeleteRepo_Handler,
		},
		{
			MethodName: "updateRepo",
			Handler:    _Demo_UpdateRepo_Handler,
		},
		{
			MethodName: "triggerScan",
			Handler:    _Demo_TriggerScan_Handler,
		},
		{
			MethodName: "getScanResults",
			Handler:    _Demo_GetScanResults_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo.proto",
}
