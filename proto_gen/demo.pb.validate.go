// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: demo.proto

package proto_gen

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyMessageMultiError, or
// nil if none found.
func (m *EmptyMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyMessageMultiError(errors)
	}

	return nil
}

// EmptyMessageMultiError is an error wrapping multiple validation errors
// returned by EmptyMessage.ValidateAll() if the designated constraints aren't met.
type EmptyMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyMessageMultiError) AllErrors() []error { return m }

// EmptyMessageValidationError is the validation error returned by
// EmptyMessage.Validate if the designated constraints aren't met.
type EmptyMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyMessageValidationError) ErrorName() string { return "EmptyMessageValidationError" }

// Error satisfies the builtin error interface
func (e EmptyMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyMessageValidationError{}

// Validate checks the field values on ErrorResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorResponseMultiError, or
// nil if none found.
func (m *ErrorResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for StatusCode

	if len(errors) > 0 {
		return ErrorResponseMultiError(errors)
	}

	return nil
}

// ErrorResponseMultiError is an error wrapping multiple validation errors
// returned by ErrorResponse.ValidateAll() if the designated constraints
// aren't met.
type ErrorResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorResponseMultiError) AllErrors() []error { return m }

// ErrorResponseValidationError is the validation error returned by
// ErrorResponse.Validate if the designated constraints aren't met.
type ErrorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorResponseValidationError) ErrorName() string { return "ErrorResponseValidationError" }

// Error satisfies the builtin error interface
func (e ErrorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorResponseValidationError{}

// Validate checks the field values on ResponseMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ResponseMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResponseMessage with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ResponseMessageMultiError, or nil if none found.
func (m *ResponseMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ResponseMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Msg

	if len(errors) > 0 {
		return ResponseMessageMultiError(errors)
	}

	return nil
}

// ResponseMessageMultiError is an error wrapping multiple validation errors
// returned by ResponseMessage.ValidateAll() if the designated constraints
// aren't met.
type ResponseMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResponseMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResponseMessageMultiError) AllErrors() []error { return m }

// ResponseMessageValidationError is the validation error returned by
// ResponseMessage.Validate if the designated constraints aren't met.
type ResponseMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseMessageValidationError) ErrorName() string { return "ResponseMessageValidationError" }

// Error satisfies the builtin error interface
func (e ResponseMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponseMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseMessageValidationError{}

// Validate checks the field values on CreateRepoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRepoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRepoReqMultiError, or
// nil if none found.
func (m *CreateRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetName()) > 256 {
		err := CreateRepoReqValidationError{
			field:  "Name",
			reason: "value length must be at most 256 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateRepoReq_Name_Pattern.MatchString(m.GetName()) {
		err := CreateRepoReqValidationError{
			field:  "Name",
			reason: "value does not match regex pattern \"^[a-zA-Z0-9]{1,100}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Url

	if len(errors) > 0 {
		return CreateRepoReqMultiError(errors)
	}

	return nil
}

// CreateRepoReqMultiError is an error wrapping multiple validation errors
// returned by CreateRepoReq.ValidateAll() if the designated constraints
// aren't met.
type CreateRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRepoReqMultiError) AllErrors() []error { return m }

// CreateRepoReqValidationError is the validation error returned by
// CreateRepoReq.Validate if the designated constraints aren't met.
type CreateRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepoReqValidationError) ErrorName() string { return "CreateRepoReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepoReqValidationError{}

var _CreateRepoReq_Name_Pattern = regexp.MustCompile("^[a-zA-Z0-9]{1,100}$")

// Validate checks the field values on DeleteRepoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteRepoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteRepoReqMultiError, or
// nil if none found.
func (m *DeleteRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteRepoReqMultiError(errors)
	}

	return nil
}

// DeleteRepoReqMultiError is an error wrapping multiple validation errors
// returned by DeleteRepoReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteRepoReqMultiError) AllErrors() []error { return m }

// DeleteRepoReqValidationError is the validation error returned by
// DeleteRepoReq.Validate if the designated constraints aren't met.
type DeleteRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRepoReqValidationError) ErrorName() string { return "DeleteRepoReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRepoReqValidationError{}

// Validate checks the field values on UpdateRepoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateRepoReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateRepoReqMultiError, or
// nil if none found.
func (m *UpdateRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return UpdateRepoReqMultiError(errors)
	}

	return nil
}

// UpdateRepoReqMultiError is an error wrapping multiple validation errors
// returned by UpdateRepoReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateRepoReqMultiError) AllErrors() []error { return m }

// UpdateRepoReqValidationError is the validation error returned by
// UpdateRepoReq.Validate if the designated constraints aren't met.
type UpdateRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRepoReqValidationError) ErrorName() string { return "UpdateRepoReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRepoReqValidationError{}

// Validate checks the field values on GetRepoReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRepoReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRepoReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRepoReqMultiError, or
// nil if none found.
func (m *GetRepoReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRepoReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetRepoReqMultiError(errors)
	}

	return nil
}

// GetRepoReqMultiError is an error wrapping multiple validation errors
// returned by GetRepoReq.ValidateAll() if the designated constraints aren't met.
type GetRepoReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRepoReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRepoReqMultiError) AllErrors() []error { return m }

// GetRepoReqValidationError is the validation error returned by
// GetRepoReq.Validate if the designated constraints aren't met.
type GetRepoReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepoReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepoReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepoReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepoReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepoReqValidationError) ErrorName() string { return "GetRepoReqValidationError" }

// Error satisfies the builtin error interface
func (e GetRepoReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepoReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepoReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepoReqValidationError{}

// Validate checks the field values on GetRepoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetRepoResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRepoResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetRepoRespMultiError, or
// nil if none found.
func (m *GetRepoResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRepoResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Url

	if len(errors) > 0 {
		return GetRepoRespMultiError(errors)
	}

	return nil
}

// GetRepoRespMultiError is an error wrapping multiple validation errors
// returned by GetRepoResp.ValidateAll() if the designated constraints aren't met.
type GetRepoRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRepoRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRepoRespMultiError) AllErrors() []error { return m }

// GetRepoRespValidationError is the validation error returned by
// GetRepoResp.Validate if the designated constraints aren't met.
type GetRepoRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRepoRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRepoRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRepoRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRepoRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRepoRespValidationError) ErrorName() string { return "GetRepoRespValidationError" }

// Error satisfies the builtin error interface
func (e GetRepoRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRepoResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRepoRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRepoRespValidationError{}

// Validate checks the field values on ScanTriggerReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ScanTriggerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ScanTriggerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ScanTriggerReqMultiError,
// or nil if none found.
func (m *ScanTriggerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ScanTriggerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return ScanTriggerReqMultiError(errors)
	}

	return nil
}

// ScanTriggerReqMultiError is an error wrapping multiple validation errors
// returned by ScanTriggerReq.ValidateAll() if the designated constraints
// aren't met.
type ScanTriggerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ScanTriggerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ScanTriggerReqMultiError) AllErrors() []error { return m }

// ScanTriggerReqValidationError is the validation error returned by
// ScanTriggerReq.Validate if the designated constraints aren't met.
type ScanTriggerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScanTriggerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScanTriggerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScanTriggerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScanTriggerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScanTriggerReqValidationError) ErrorName() string { return "ScanTriggerReqValidationError" }

// Error satisfies the builtin error interface
func (e ScanTriggerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScanTriggerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScanTriggerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScanTriggerReqValidationError{}

// Validate checks the field values on GetScanResultReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetScanResultReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScanResultReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScanResultReqMultiError, or nil if none found.
func (m *GetScanResultReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScanResultReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetScanResultReqMultiError(errors)
	}

	return nil
}

// GetScanResultReqMultiError is an error wrapping multiple validation errors
// returned by GetScanResultReq.ValidateAll() if the designated constraints
// aren't met.
type GetScanResultReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScanResultReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScanResultReqMultiError) AllErrors() []error { return m }

// GetScanResultReqValidationError is the validation error returned by
// GetScanResultReq.Validate if the designated constraints aren't met.
type GetScanResultReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScanResultReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScanResultReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScanResultReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScanResultReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScanResultReqValidationError) ErrorName() string { return "GetScanResultReqValidationError" }

// Error satisfies the builtin error interface
func (e GetScanResultReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScanResultReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScanResultReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScanResultReqValidationError{}

// Validate checks the field values on Vulnerability with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Vulnerability) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vulnerability with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in VulnerabilityMultiError, or
// nil if none found.
func (m *Vulnerability) ValidateAll() error {
	return m.validate(true)
}

func (m *Vulnerability) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for RuleId

	if all {
		switch v := interface{}(m.GetLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VulnerabilityValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VulnerabilityValidationError{
					field:  "Location",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VulnerabilityValidationError{
				field:  "Location",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMetadata()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VulnerabilityValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VulnerabilityValidationError{
					field:  "Metadata",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VulnerabilityValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return VulnerabilityMultiError(errors)
	}

	return nil
}

// VulnerabilityMultiError is an error wrapping multiple validation errors
// returned by Vulnerability.ValidateAll() if the designated constraints
// aren't met.
type VulnerabilityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VulnerabilityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VulnerabilityMultiError) AllErrors() []error { return m }

// VulnerabilityValidationError is the validation error returned by
// Vulnerability.Validate if the designated constraints aren't met.
type VulnerabilityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VulnerabilityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VulnerabilityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VulnerabilityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VulnerabilityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VulnerabilityValidationError) ErrorName() string { return "VulnerabilityValidationError" }

// Error satisfies the builtin error interface
func (e VulnerabilityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVulnerability.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VulnerabilityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VulnerabilityValidationError{}

// Validate checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Result) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Result with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ResultMultiError, or nil if none found.
func (m *Result) ValidateAll() error {
	return m.validate(true)
}

func (m *Result) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Status

	// no validation rules for RepoName

	// no validation rules for RepoUrl

	for idx, item := range m.GetFindings() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ResultValidationError{
						field:  fmt.Sprintf("Findings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ResultValidationError{
						field:  fmt.Sprintf("Findings[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ResultValidationError{
					field:  fmt.Sprintf("Findings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for QueueAt

	// no validation rules for ScanningAt

	// no validation rules for FinishedAt

	if len(errors) > 0 {
		return ResultMultiError(errors)
	}

	return nil
}

// ResultMultiError is an error wrapping multiple validation errors returned by
// Result.ValidateAll() if the designated constraints aren't met.
type ResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResultMultiError) AllErrors() []error { return m }

// ResultValidationError is the validation error returned by Result.Validate if
// the designated constraints aren't met.
type ResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResultValidationError) ErrorName() string { return "ResultValidationError" }

// Error satisfies the builtin error interface
func (e ResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResultValidationError{}

// Validate checks the field values on GetScanResultResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetScanResultResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetScanResultResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetScanResultRespMultiError, or nil if none found.
func (m *GetScanResultResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetScanResultResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetScanResultRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetScanResultRespValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetScanResultRespValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetScanResultRespMultiError(errors)
	}

	return nil
}

// GetScanResultRespMultiError is an error wrapping multiple validation errors
// returned by GetScanResultResp.ValidateAll() if the designated constraints
// aren't met.
type GetScanResultRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetScanResultRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetScanResultRespMultiError) AllErrors() []error { return m }

// GetScanResultRespValidationError is the validation error returned by
// GetScanResultResp.Validate if the designated constraints aren't met.
type GetScanResultRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetScanResultRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetScanResultRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetScanResultRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetScanResultRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetScanResultRespValidationError) ErrorName() string {
	return "GetScanResultRespValidationError"
}

// Error satisfies the builtin error interface
func (e GetScanResultRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetScanResultResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetScanResultRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetScanResultRespValidationError{}

// Validate checks the field values on Vulnerability_Location with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Vulnerability_Location) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vulnerability_Location with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Vulnerability_LocationMultiError, or nil if none found.
func (m *Vulnerability_Location) ValidateAll() error {
	return m.validate(true)
}

func (m *Vulnerability_Location) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Path

	// no validation rules for Line

	if len(errors) > 0 {
		return Vulnerability_LocationMultiError(errors)
	}

	return nil
}

// Vulnerability_LocationMultiError is an error wrapping multiple validation
// errors returned by Vulnerability_Location.ValidateAll() if the designated
// constraints aren't met.
type Vulnerability_LocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Vulnerability_LocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Vulnerability_LocationMultiError) AllErrors() []error { return m }

// Vulnerability_LocationValidationError is the validation error returned by
// Vulnerability_Location.Validate if the designated constraints aren't met.
type Vulnerability_LocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Vulnerability_LocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Vulnerability_LocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Vulnerability_LocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Vulnerability_LocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Vulnerability_LocationValidationError) ErrorName() string {
	return "Vulnerability_LocationValidationError"
}

// Error satisfies the builtin error interface
func (e Vulnerability_LocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVulnerability_Location.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Vulnerability_LocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Vulnerability_LocationValidationError{}

// Validate checks the field values on Vulnerability_MetaData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Vulnerability_MetaData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Vulnerability_MetaData with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Vulnerability_MetaDataMultiError, or nil if none found.
func (m *Vulnerability_MetaData) ValidateAll() error {
	return m.validate(true)
}

func (m *Vulnerability_MetaData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Description

	// no validation rules for Severity

	if len(errors) > 0 {
		return Vulnerability_MetaDataMultiError(errors)
	}

	return nil
}

// Vulnerability_MetaDataMultiError is an error wrapping multiple validation
// errors returned by Vulnerability_MetaData.ValidateAll() if the designated
// constraints aren't met.
type Vulnerability_MetaDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Vulnerability_MetaDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Vulnerability_MetaDataMultiError) AllErrors() []error { return m }

// Vulnerability_MetaDataValidationError is the validation error returned by
// Vulnerability_MetaData.Validate if the designated constraints aren't met.
type Vulnerability_MetaDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Vulnerability_MetaDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Vulnerability_MetaDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Vulnerability_MetaDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Vulnerability_MetaDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Vulnerability_MetaDataValidationError) ErrorName() string {
	return "Vulnerability_MetaDataValidationError"
}

// Error satisfies the builtin error interface
func (e Vulnerability_MetaDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVulnerability_MetaData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Vulnerability_MetaDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Vulnerability_MetaDataValidationError{}
