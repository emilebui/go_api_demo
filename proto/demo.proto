syntax = "proto3";

package demo;

option go_package = "/proto/proto_gen";

import "google/api/annotations.proto";
import "validate/validate.proto";

message emptyMessage {}

message errorResponse {
    int64 code = 1;
    string message = 2;
    int64 status_code = 3;
}

message ResponseMessage {
    string msg = 1;
}

message CreateRepoReq {
    string name = 1 [(validate.rules).string = {
        pattern:   "^[a-zA-Z0-9]{1,100}$",
        max_bytes: 256,
    }];
    string url = 2;
}

message DeleteRepoReq {
    string name = 1;
}

message UpdateRepoReq {
    string name = 1;
    string url = 2;
}

message GetRepoReq {
    string name = 1;
}

message GetRepoResp {
    string name = 1;
    string url = 2;
}

message ScanTriggerReq {
    string name = 1;
}

message GetScanResultReq {
    string name = 1;
}

message Vulnerability {
    string type = 1;
    string rule_id = 2;
    Location location = 3;
    MetaData metadata = 4;
    message Location {
        string path = 1;
        int32 line = 2;
    }
    message MetaData {
        string description = 1;
        string severity = 2;
    }
}

message Result {
    string id = 1;
    string status = 2;
    string repo_name = 3;
    string repo_url = 4;
    repeated Vulnerability findings = 5;
    int64 queue_at = 6;
    int64 scanning_at = 7;
    int64 finished_at = 8;
}

message GetScanResultResp {
    repeated Result data = 1;
}

message GetAllRepoRes {
    repeated GetRepoResp repositories = 1;
}

message AddRule {
    string description = 1;
    string severity = 2;
    string stringCompare = 3;
}

message Rule {
    string id = 1;
    string description = 2;
    string severity = 3;
    string stringCompare = 4;
}

message GetAllRulesRes {
    repeated Rule rules = 1;
}

message DeleteRuleReq {
    string id = 1;
}

service Demo {
    rpc helloWorld(emptyMessage) returns (ResponseMessage) {
        option (google.api.http) = {
            get: "/v1/test"
        };
    }

    rpc createRepo(CreateRepoReq) returns (ResponseMessage) {
        option (google.api.http) = {
            post: "/v1/repo"
            body: "*"
        };
    }

    rpc getRepo(GetRepoReq) returns (GetRepoResp) {
        option (google.api.http) = {
            get: "/v1/repo/{name}"
        };
    }

    rpc getAllRepo(emptyMessage) returns (GetAllRepoRes) {
        option (google.api.http) = {
            get: "/v1/repo/all"
        };
    }

    rpc deleteRepo(DeleteRepoReq) returns (ResponseMessage) {
        option (google.api.http) = {
            delete: "/v1/repo/{name}"
        };
    }

    rpc updateRepo(UpdateRepoReq) returns (ResponseMessage) {
        option (google.api.http) = {
            put: "/v1/repo/{name}"
            body: "*"
        };
    }

    rpc triggerScan(ScanTriggerReq) returns (ResponseMessage) {
        option (google.api.http) = {
            get: "/v1/repo/trigger/{name}"
        };
    }

    rpc getScanResults(GetScanResultReq) returns (GetScanResultResp) {
        option (google.api.http) = {
            get: "/v1/repo/results/{name}"
        };
    }

    rpc addRule(AddRule) returns (ResponseMessage) {
        option (google.api.http) = {
            post: "/v1/rule"
            body: "*"
        };
    }

    rpc deleteRule(DeleteRuleReq) returns (ResponseMessage) {
        option (google.api.http) = {
            delete: "/v1/rule/{id}"
        };
    }

    rpc editRule(Rule) returns (ResponseMessage) {
        option (google.api.http) = {
            put: "/v1/rule/{id}"
            body: "*"
        };
    }

    rpc getAllRules(emptyMessage) returns (GetAllRulesRes) {
        option (google.api.http) = {
            get: "/v1/rule/all"
        };
    }
}
